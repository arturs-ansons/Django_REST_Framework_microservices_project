name: Shipping Service CI

on:
  push:
    branches: ["main", "develop"]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        ports:
          - 3306:3306
        env:
          MYSQL_DATABASE: shipping_service_db
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        options: >-
          --health-cmd="mysqladmin ping -h localhost -p${{ secrets.MYSQL_ROOT_PASSWORD }} --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_PASSWORD }}
        options: >-
          --health-cmd="rabbitmq-diagnostics -q check_running"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      ENVIRONMENT: docker
      DATABASE_URL: mysql://root:${{ secrets.MYSQL_ROOT_PASSWORD }}@localhost:3306/shipping_service_db
      RABBITMQ_HOST: localhost
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
      SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DJANGO_SETTINGS_MODULE: shipping_service.settings
      PYTHONUNBUFFERED: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django mysqlclient

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL..."
          for i in {1..10}; do
            if mysqladmin ping -h "localhost" -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" --silent; then
              echo "MySQL is ready!"
              break
            fi
            sleep 5
          done

      - name: Run migrations
        run: |
          python manage.py migrate --noinput

      - name: Run unit tests
        run: |
          pytest -v --disable-warnings
